Index: frontend/src/components/Chat.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n    <div id = \"all\">\r\n        <div id=\"message_box\">\r\n            <div id=\"message_show\" class=\"message_show\">\r\n                <div v-for=\"item in myMessages\" :key=\"item.id\">\r\n                    <div class=\"message_time\">\r\n                        <span>{{item.time}}</span>\r\n                    </div>\r\n                    <div class=\"message_is_me\" v-if=\"item.content != null\">\r\n                        <div class=\"col_is_me\">\r\n                            <el-avatar shape=\"square\" icon=el-icon-user-solid></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_is_me_content\">\r\n                            <span v-html=\"item.content\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"message_not_me\" v-if=\"item.content === 'Testcontent'\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <span>Sorry! I cannot understand.</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"message_not_me\" v-if=\"item.content === 'Testcontent'\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <span @click=\"dialogVisible = true\">Can you answer some questions so we can recommend house for you.</span>\r\n                            <el-button id=\"ok\" size=\"medium\" type=\"primary\" @click=\"dialogVisible = true\">OK</el-button>\r\n                        </div>\r\n                    </div>\r\n\r\n                  <div class=\"message_not_me\" v-if=\"item.reply != null\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <span v-html=\"item.reply\"></span>\r\n                        </div>\r\n                        <!--<div class=\"message_not_me_content\" v-if=\"status ==='0'\">\r\n                            <router-link to=\"/recommend\">Click to see our recommendation for you.</router-link>\r\n                        </div>-->\r\n                  </div>\r\n                    <!--<div class=\"message_not_me\" v-if=\"status ==='0'&& item.content != null\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <router-link to=\"/recommend\">Click to see our recommendation for you.</router-link>\r\n                        </div>\r\n                    </div>-->\r\n                </div>\r\n              <div class=\"message_not_me\" v-if=\"status\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <router-link to=\"/recommend\">{{this.recommendLink}}</router-link>\r\n                        </div>\r\n              </div>\r\n              <div class=\"message_not_me\" v-if=\"questionType[0]==0||questionType[0]==2\">\r\n                        <div class=\"col_not_me\">\r\n                            <el-avatar src=\"http://img.qqzhi.com/uploads/2019-02-25/230332138.jpg\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"message_not_me_content\">\r\n                            <span @click=\"dialogVisible = true\" v-bind:style=\"styleObject\">Click here to get the questionnaire.</span>\r\n                        </div>\r\n              </div>\r\n            </div>\r\n            <div id=\"message_send\">\r\n                <br/>\r\n                <el-input\r\n                        type=\"textarea\"\r\n                        :autosize=\"{ minRows: 5, maxRows: 8}\"\r\n                        placeholder=\"Please enter your message\"\r\n                        v-model=\"textarea\"\r\n                        maxlength=\"300\"\r\n                        show-word-limit\r\n                        clearable\r\n                >\r\n                </el-input>\r\n                <br/>\r\n                <el-button id=\"send\" size=\"medium\" type=\"primary\" @click=\"sendMessage()\">send</el-button>\r\n            </div>\r\n        </div>\r\n        <el-dialog\r\n                title=\" \"\r\n                :visible.sync=\"dialogVisible\"\r\n                width=\"30%\"\r\n                :before-close=\"handleClose\"\r\n                fullscreen = true\r\n                id=\"q\"\r\n\r\n        >\r\n            <Questions ref=\"questionnaire\" :message = \"questionType\"  ></Questions><!--v-on:=\"closeDialogue = 'handleClose'\"-->\r\n            <span slot=\"footer\" class=\"dialog-footer\">\r\n                        <el-button @click=\"dialogVisible = false\">Cancel</el-button>\r\n                        <!--<el-button type=\"primary\" @click=\"dialogVisible = false\">Submit</el-button>-->\r\n                        <el-button type=\"primary\" @click= \"submit()\">Submit</el-button>\r\n                    </span>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    import Questions from '../components/Questions.vue'\r\n    export default {\r\n        name: 'Chat.vue',\r\n        components: {Questions: Questions},\r\n        status:false,\r\n        mounted () {\r\n            this.scrollToBottom()\r\n        },\r\n        data: function () {\r\n            return {\r\n              styleObject: {\r\n                color: \"#660099\",\r\n                textDecoration:\"underline\",\r\n              },\r\n                recommendLink:\"Click here to get our recommendations for you.\",\r\n                isRecommend:false,\r\n                isReloadData:true,\r\n                textarea: '',\r\n                myMessages: [\r\n                  {time: \"testtime\"},\r\n                  {content: 'Testcontent'},\r\n                  {reply:\"Welcome to the Smart House Recommendation Assistant\"},\r\n                  {reply: \"Do you need us to recommend suitable housing information for you?\"}],\r\n                /*myMessages: [],*/\r\n                messageTime: [],\r\n                time: 'now',\r\n                randomNumber:0,\r\n                dialogVisible: false,\r\n                /*总对话数*/\r\n                processNumber:0,\r\n                /*正在进行的对话次数*/\r\n                currentProcess:0,\r\n              //问卷类型， 0为选填，1为直接推荐，2为必填\r\n                questionType:[1],\r\n\r\n            }\r\n        },\r\n\r\n        updated: function () {\r\n            this.scrollToBottom()\r\n        },\r\n        watch:{\r\n          /*'status':{\r\n            handler:function (val,oldval) {\r\n              if (status===\"0\"){\r\n                this.isRecommend = true\r\n              }\r\n            }\r\n          }*/\r\n        },\r\n        methods: {\r\n          handleClose:function(data){\r\n              alert(data)\r\n          },\r\n          reload () {\r\n            this.isReloadData = false\r\n            this.$nextTick(() => {\r\n              this.isReloadData = true\r\n            })\r\n          },\r\n            // 滚动条自动保持在底部\r\n            scrollToBottom: function () {\r\n                this.$nextTick(() => {\r\n                    var container = this.$el.querySelector('#message_show')\r\n                    container.scrollTop = container.scrollHeight\r\n                })\r\n            },\r\n          //处理文本换行\r\n            preText (pretext) {\r\n              return pretext.replace(/\\r\\n/g, '<br/>').replace(/\\n/g, '<br/>')\r\n            },\r\n            sendMessage () {\r\n                let yy = new Date().getFullYear()\r\n                let mm = new Date().getMonth() + 1\r\n                let dd = new Date().getDate()\r\n                let hh = new Date().getHours()\r\n                let mf = new Date().getMinutes() < 10 ? '0' + new Date().getMinutes() : new Date().getMinutes()\r\n                let ss = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds() : new Date().getSeconds()\r\n                var time = yy + '-' + mm + '-' + dd + ' ' + hh + ':' + mf + ':' + ss\r\n                var message =  this.preText(this.textarea)\r\n                if(message.match(/^[ ]+$/)||message===\"\"){\r\n                    alert(\"invalid null message\")\r\n                }\r\n                else{\r\n                    this.myMessages.push({ time: time })\r\n                    this.myMessages.push({ content: message })\r\n                    /*this.myMessages.push({ reply: message })*/\r\n                    this.process(message)\r\n                    /*this.status = \"1\"*/\r\n                    /*this.$store.commit(\"newStatus\",this.status)*/\r\n                }\r\n                this.textarea = ''\r\n                this.randomNumber = this.getRandomFromBackend()\r\n\r\n            },\r\n            process(message){\r\n                const path = 'http://localhost:5000/api/nlp'\r\n                let data = [message,this.processNumber,this.currentProcess]\r\n                axios.post(path, data)\r\n                    .then(response => {\r\n                      let re = response.data.reply\r\n                      /*alert(re[1])\r\n                      alert(re[2])*/\r\n                      if (re[1]==16){//选填问卷\r\n                        this.questionType[0] = 0\r\n                        this.questionType = this.questionType.concat(re[3])\r\n                        /*this.questionType.push(this.dialogVisible)*/\r\n                        \r\n                      }\r\n                      else if(re[1]==17&&re[2]==0){//直接推荐\r\n                          this.myMessages.push({ reply: \"Since you choose not to fill the questionnaire, we will directly find houses for you according to your answers above.\" })\r\n                          /*this.myMessages.push({ reply: \"The system is working, please wait for a while.\" })*/\r\n                          this.questionType[0] = 1\r\n                      /*  this.$refs.questionnaire.recommend(re[3])*/\r\n                        this.$store.commit(\"newRecommendation\",re[3])\r\n                        this.$store.commit(\"newStatus\",\"1\")\r\n                        this.status = true\r\n                        /*this.$nextTick(() => {\r\n                          this.status = true\r\n                        })*/\r\n                        this.textarea = \" \"\r\n                        this.textarea = \"\"\r\n                        this.recommendLink = \"Click here to get our recommendations for you.\"\r\n                        /*this.status = */\r\n                        /*this.reload()*/\r\n                        /*alert(this.$store.state.recommendation)*/\r\n                        /*this.$router.push(\"/recommend\");*/\r\n                      }\r\n                      else if(re[1]==15){//有回复，填必填问卷\r\n                        let rep = this.preText(re[0])\r\n                        this.myMessages.push({ reply: rep })\r\n                        this.questionType[0] = 2\r\n                        this.questionType = this.questionType.concat(re[3])\r\n                      }\r\n                      else{\r\n                        let rep = this.preText(re[0])\r\n                        this.myMessages.push({ reply: rep })\r\n                      }\r\n                      this.processNumber = re[1]\r\n                      this.currentProcess = re[2]\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n\r\n                    })\r\n\r\n            },\r\n            submit(){\r\n                this.dialogVisible = this.$refs.questionnaire.recommend()\r\n                this.status = \"0\"\r\n                /*this.dialogVisible = false*/\r\n                this.questionType[0] = 1\r\n            },\r\n           /* changeStatus(){\r\n                if(this.$store.state.status==\"0\"){\r\n                    this.status = this.$store.state.status\r\n                    this.dialogVisible = false\r\n                }\r\n            },*/\r\n            /*getRandom (){\r\n                this.randomNumber = this.getRandomFromBackend()\r\n            },\r\n            getRandomFromBackend (){\r\n                const path = 'http://localhost:5000/api/random'\r\n                axios.get(path)\r\n                    .then(response => {\r\n                        this.randomNumber = response.data.randomNumber\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    })\r\n            },*/\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    /*.el-button{\r\n        background-color: #66A4AC;\r\n\r\n    }*/\r\n    /*#all{\r\n        background: #C2DDE4;\r\n    }*/\r\n    #message_box{\r\n        border: 1px solid #d7dae2;\r\n        border-radius: 4px ;\r\n        background: #f4f5f7;\r\n        box-shadow: 0 1px 2px rgba(0, 0, 0, .12);\r\n        width: 80%;\r\n        height: 650px;\r\n        margin: 0 auto;\r\n        margin-top: 20px;\r\n    }\r\n    #message_show{\r\n        height: 430px;\r\n        border-bottom: 1px solid #000000;\r\n        overflow-y:auto;\r\n    }\r\n    .message_time{\r\n        text-align: center;\r\n        font-size: 15px;\r\n        color: gray;\r\n        padding: 10px 0px;\r\n    }\r\n    .message_is_me{\r\n        width: 100%;\r\n        float: right;\r\n        overflow: hidden;\r\n    }\r\n    .message_is_me_content{\r\n        float: right;\r\n        color: white;\r\n        margin: 10px;\r\n        padding: 10px;\r\n        border-radius: 8px 0px 8px 8px ;\r\n        background: #06565B;\r\n        max-width: 70%;\r\n        width: fit-content;\r\n        word-wrap: break-word;\r\n        word-break: break-all;\r\n        overflow: hidden;\r\n    }\r\n    .col_is_me{\r\n        width: 40px;\r\n        float: right;\r\n        padding: 0px 10px;\r\n    }\r\n    .message_not_me{\r\n        width: 100%;\r\n        float: left;\r\n        overflow: hidden;\r\n    }\r\n    .message_not_me_content{\r\n        float: left;\r\n        margin: 10px;\r\n        padding: 10px;\r\n        border-radius: 0px 8px 8px 8px ;\r\n        background: white;\r\n        width: fit-content;\r\n        max-width: 70%;\r\n        word-wrap: break-word;\r\n        word-break: break-all;\r\n        overflow: hidden;\r\n    }\r\n    .col_not_me{\r\n        width: 40px;\r\n        float: left;\r\n        padding: 0px 10px;\r\n    }\r\n    #message_send{\r\n        padding-left: 10px;\r\n        width: 97%;\r\n    }\r\n    #send{\r\n        float: right;\r\n        margin-top: 20px;\r\n    }\r\n\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- frontend/src/components/Chat.vue	(revision b31549bd7e04101de6442a93f48fefc3ef758736)
+++ frontend/src/components/Chat.vue	(date 1620416023744)
@@ -101,6 +101,7 @@
                         <el-button type="primary" @click= "submit()">Submit</el-button>
                     </span>
         </el-dialog>
+
     </div>
 </template>
 
@@ -116,6 +117,7 @@
         },
         data: function () {
             return {
+              rstatus:this.$store.state.status,
               styleObject: {
                 color: "#660099",
                 textDecoration:"underline",
@@ -148,18 +150,14 @@
             this.scrollToBottom()
         },
         watch:{
-          /*'status':{
-            handler:function (val,oldval) {
-              if (status==="0"){
-                this.isRecommend = true
-              }
-            }
-          }*/
+          rstatus(newVal, oldVal) {
+            alert(newVal)
+          }
         },
         methods: {
-          handleClose:function(data){
+         /* handleClose:function(data){
               alert(data)
-          },
+          },*/
           reload () {
             this.isReloadData = false
             this.$nextTick(() => {
@@ -187,7 +185,11 @@
                 var time = yy + '-' + mm + '-' + dd + ' ' + hh + ':' + mf + ':' + ss
                 var message =  this.preText(this.textarea)
                 if(message.match(/^[ ]+$/)||message===""){
-                    alert("invalid null message")
+                    /*alert("invalid null message")*/
+                  this.$notify.error({
+                    message: 'Invalid null message,please try again',
+                    duration: 2000
+                  });
                 }
                 else{
                     this.myMessages.push({ time: time })
@@ -213,7 +215,7 @@
                         this.questionType[0] = 0
                         this.questionType = this.questionType.concat(re[3])
                         /*this.questionType.push(this.dialogVisible)*/
-                        
+
                       }
                       else if(re[1]==17&&re[2]==0){//直接推荐
                           this.myMessages.push({ reply: "Since you choose not to fill the questionnaire, we will directly find houses for you according to your answers above." })
@@ -254,8 +256,11 @@
 
             },
             submit(){
-                this.dialogVisible = this.$refs.questionnaire.recommend()
-                this.status = "0"
+                let a = this.$refs.questionnaire.recommend()
+                alert(a)
+                /*this.dialogVisible = this.$refs.questionnaire.visible*/
+                /*this.dialogVisible = this.$refs.questionnaire.visible*/
+                /*this.status = this.$store.state.status*/
                 /*this.dialogVisible = false*/
                 this.questionType[0] = 1
             },
Index: questions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>questionList = [\r\n    \"Do you need us to recommend suitable housing information for you?\",\r\n    \"Bye!\",\r\n    \"What is the approximate price you can accept? (We currently have houses whose prices are between 34,900 and 755,000 dollars)\",\r\n    \"How many bedrooms do you want? (We currently have houses with 0 to 8 bedrooms)\",\r\n    \"How many full bathrooms do you want? (We currently have houses with 0 to 6 full bathrooms)\",\r\n    \"How many half bathrooms do you want? (We currently have houses with 0 to 4 full bathrooms)\",\r\n    \"What size of house do you want? (sqft) (We currently have houses whose areas are between 1300 and 215245 sqft)\",\r\n    \"\"\"Which neighborhood do you want? (Enter the number)\r\n    0   It does not matter\r\n    1   Bloomington Heights\r\n    2\tBluestem\r\n    3\tBriardale\r\n    4\tBrookside\r\n    5\tClear Creek\r\n    6\tCollege Creek\r\n    7\tCrawford\r\n    8\tEdwards\r\n    9 \tGilbert\r\n    10\tIowa DOT and Rail Road\r\n    11\tMeadow Village\r\n    12\tMitchell\r\n    13\tNorth Ames\r\n    14\tNorthridge\r\n    15\tNorthpark Villa\r\n    16\tNorthridge Heights\r\n    17\tNorthwest Ames\r\n    18\tOld Town\r\n    19\tSouth & West of Iowa State University\r\n    20\tSawyer\r\n    21\tSawyer West\r\n    22\tSomerset\r\n    23\tStone Brook\r\n    24\tTimberland\r\n    25\tVeenker\"\"\",\r\n    \"\"\"What kind of utility type do you want?（Enter the number）\r\n    0   It does not matter\r\n    1   All public Utilities (E,G,W,& S)\t\r\n    2\tElectricity, Gas, and Water (Septic Tank)\r\n    3\tElectricity and Gas Only\r\n    4\tElectricity only\t\r\n    \"\"\",\r\n    \"\"\"What kind of house style do you want?（Enter the number）\r\n    0   It does not matter\r\n    1   One story\r\n    2\tOne and one-half story: 2nd level finished\r\n    3\tOne and one-half story: 2nd level unfinished\r\n    4\tTwo story\r\n    5\tTwo and one-half story: 2nd level finished\r\n    6\tTwo and one-half story: 2nd level unfinished\r\n    7\tSplit Foyer\r\n    8\tSplit Level\r\n    \"\"\",\r\n    \"\"\"What kind of heating type do you want?（Enter the number）\r\n    0   It does not matter\r\n    1\tFloor Furnace\r\n    2\tGas forced warm air furnace\r\n    3\tGas hot water or steam heat\r\n    4\tGravity furnace\t\r\n    5\tHot water or steam heat other than gas\r\n    6\tWall furnace\"\"\",\r\n    \"\"\"Do you want a central air conditioning?\r\n    0   It does not matter\r\n    1   Yes\r\n    2   No\r\n    \"\"\",\r\n    \"How many kitchens(above ground) do you want? (We currently have houses with 0 to 3 kitchens)\",\r\n    \"How many cars would you like the garage to hold? (We currently have houses with garage that can hold 0 to 5 cars)\",\r\n    \"How many rooms(total rooms above ground) do you want? (We currently have houses with 3 to 14 rooms)\",\r\n    \"Would you like to complete the questionnaire to provide more information, which would make the recommendation result more accurate.\",\r\n    \"Thank you for answering questions, but we can not gain enough information based on your answer, please complete the questionnaire to provide more information.\",\r\n    \"Here is the recommendation result.\"\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- questions.py	(revision b31549bd7e04101de6442a93f48fefc3ef758736)
+++ questions.py	(date 1620412775335)
@@ -4,7 +4,7 @@
     "What is the approximate price you can accept? (We currently have houses whose prices are between 34,900 and 755,000 dollars)",
     "How many bedrooms do you want? (We currently have houses with 0 to 8 bedrooms)",
     "How many full bathrooms do you want? (We currently have houses with 0 to 6 full bathrooms)",
-    "How many half bathrooms do you want? (We currently have houses with 0 to 4 full bathrooms)",
+    "How many half bathrooms do you want? (We currently have houses with 0 to 4 half bathrooms)",
     "What size of house do you want? (sqft) (We currently have houses whose areas are between 1300 and 215245 sqft)",
     """Which neighborhood do you want? (Enter the number)
     0   It does not matter
Index: frontend/src/components/Questions.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n    <div id = \"q\">\r\n      <p>{{message}}</p>\r\n        <h1>Here is the questions page</h1><br>\r\n        <el-form ref=\"form\" :model=\"form\" label-width=\"80px\">\r\n            <el-form-item >\r\n                <span>Q1 Please identifies the general zoning classification.</span><br>\r\n                <el-select v-model=\"form.classification\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.classifications\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"\">\r\n                <span>Q2 What size of house do you want?(sqft)</span>\r\n                <el-input v-model=\"form.inputSize\" placeholder=\"please enter\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q3 Please choose the flatness property.</span><br>\r\n                <el-select v-model=\"form.flatness\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.flatnessP\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n\r\n            <el-form-item>\r\n                <span>Q4 Please choose type of utilities.</span><br>\r\n                <el-select v-model=\"form.utility\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.utilities\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q5 Please choose the neighborhood.</span><br>\r\n                <el-select v-model=\"form.neighborhood\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.neighborhoods\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q6 Please choose the style of dwelling.</span><br>\r\n                <el-select v-model=\"form.style\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.styles\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q7 Which year do you prefer the house had been built?</span><br>\r\n                <el-date-picker\r\n                        v-model=\"form.year\"\r\n                        type=\"year\"\r\n                        placeholder=\"choose year\"\r\n                        format=\"yyyy\"\r\n                        value-format=\"yyyy\">\r\n                </el-date-picker>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q8 Please choose the type of roof.</span><br>\r\n                <el-select v-model=\"form.roof\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.roofs\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q9 Please choose the type of masonry veneer.</span><br>\r\n                <el-select v-model=\"form.vaneer\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.vaneers\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q10 Please choose the type of foundation.</span><br>\r\n                <el-select v-model=\"form.foundation\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.foundations\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"\">\r\n                <span>Q11 What size of basement do you want?</span>\r\n                <el-input v-model=\"form.basement\" placeholder=\"please enter\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q12 Please choose the type of heating.</span><br>\r\n                <el-select v-model=\"form.heating\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.heatings\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item >\r\n                <span>Q13 Do you want a central air conditioning?</span><br>\r\n                <el-select v-model=\"form.air\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.airs\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item >\r\n                <span>Q14 Please choose the type of electrical system.</span><br>\r\n                <el-select v-model=\"form.electrical\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.electricals\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"\">\r\n                <span>Q15 What size of above grade (ground) living area do you want?</span>\r\n                <el-input v-model=\"form.living\" placeholder=\"please enter\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q16 How many full bathrooms do you want?</span><br>\r\n                <el-input-number v-model=\"form.fullbath\" @change=\"handleChange\" :min=\"0\" :max=\"10\" label=\"full bathroom\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q17 How many half bathrooms do you want?</span><br>\r\n                <el-input-number v-model=\"form.halfbath\" @change=\"handleChange\" :min=\"0\" :max=\"10\" label=\"half bathroom\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q18 How many bedrooms(above ground) do you want?</span><br>\r\n                <el-input-number v-model=\"form.bedroom\" @change=\"handleChange\" :min=\"0\" :max=\"10\" label=\"bedroom\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q19 How many kitchens(above ground) do you want?</span><br>\r\n                <el-input-number v-model=\"form.kitchen\" @change=\"handleChange\" :min=\"0\" :max=\"10\" label=\"kitchen\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q20 How many rooms(total rooms above ground) do you want?</span><br>\r\n                <el-input-number v-model=\"form.room\" @change=\"handleChange\" :min=\"0\" :max=\"30\" label=\"room\" ></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <span>Q21 How many fire places do you want?</span><br>\r\n                <el-input-number v-model=\"form.fire\" @change=\"handleChange\" :min=\"0\" :max=\"5\" label=\"fire\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item label=\"\">\r\n                <span>Q22 What size of garage in car capacity do you want?</span><br>\r\n                <el-input-number v-model=\"form.garage\" @change=\"handleChange\" :min=\"0\" :max=\"10\" label=\"garage\"></el-input-number>\r\n            </el-form-item>\r\n            <el-form-item >\r\n                <span>Q23 Do you want a wood deck?</span><br>\r\n                <el-select v-model=\"form.deck\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.decks\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item >\r\n                <span>Q24 Do you want a pool?</span><br>\r\n                <el-select v-model=\"form.pool\" placeholder=\"please choose\">\r\n                    <el-option\r\n                            v-for=\"item in form.pools\"\r\n                            :key=\"item.value\"\r\n                            :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"\">\r\n                <span>Q25 What price of house do you prefer?</span>\r\n                <el-input v-model=\"form.price\" placeholder=\"please enter\"></el-input>\r\n            </el-form-item>\r\n        </el-form>\r\n        <p>\r\n            Copyright&nbsp;&copy;&nbsp;{{author}} - 2021 All rights reserved\r\n        </p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n\r\n    export default {\r\n        name: \"Questions.vue\",\r\n        props:['message'],\r\n        data() {\r\n            return {\r\n                qtype: this.message[0],\r\n                information:[],\r\n                close:false,\r\n                form: {\r\n                    classification:\"\",\r\n                    inputSize:\"\",\r\n                    flatness:\"\",\r\n                    utility:\"\",\r\n                    neighborhood:\"\",\r\n                    style:\"\",\r\n                    year:undefined,\r\n                    roof:\"\",\r\n                    vaneer:\"\",\r\n                    foundation:\"\",\r\n                    basement:\"\",\r\n                    heating:\"\",\r\n                    air:\"\",\r\n                    electrical:\"\",\r\n                    living:\"\",\r\n                    fullbath:undefined,\r\n                    halfbath:undefined,\r\n                    bedroom:undefined,\r\n                    kitchen:undefined,\r\n                    room:undefined,\r\n                    fire:undefined,\r\n                    garage:undefined,\r\n                    deck:\"\",\r\n                    pool:\"\",\r\n                    price:\"\",\r\n                    classifications: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'A',\r\n                        label: 'Agriculture'\r\n                    }, {\r\n                        value: 'C',\r\n                        label: 'Commercial'\r\n                    }, {\r\n                        value: 'FV',\r\n                        label: 'Floating Village Residential'\r\n                    }, {\r\n                        value: 'I',\r\n                        label: 'Industrial'\r\n                    }, {\r\n                        value: 'RH',\r\n                        label: 'Residential High Density'\r\n                    },{\r\n                        value: 'RL',\r\n                        label: 'Residential Low Density'\r\n                    },{\r\n                        value: 'RP',\r\n                        label: 'Residential Low Density Park'\r\n                    },{\r\n                        value: 'RM',\r\n                        label: 'Residential Medium Density'\r\n                    },\r\n                    ],\r\n                    flatnessP: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'Lvl',\r\n                        label: 'Near Flat/Level'\r\n                    }, {\r\n                        value: 'Bnk',\r\n                        label: 'Banked - Quick and significant rise from street grade to building'\r\n                    }, {\r\n                        value: 'HLF',\r\n                        label: 'Hillside - Significant slope from side to side'\r\n                    }, {\r\n                        value: 'Low',\r\n                        label: 'Depression'\r\n                    },\r\n                    ],\r\n                    utilities: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'AllPub',\r\n                        label: 'All public Utilities (E,G,W,& S)'\r\n                    }, {\r\n                        value: 'NoSewr',\r\n                        label: 'Electricity, Gas, and Water (Septic Tank)'\r\n                    }, {\r\n                        value: 'NoSeWa',\r\n                        label: 'Electricity and Gas Only'\r\n                    }, {\r\n                        value: 'ELO',\r\n                        label: 'Electricity only'\r\n                    },\r\n                    ],\r\n                    neighborhoods: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'Blmngtn',\r\n                        label: 'Bloomington Heights'\r\n                    }, {\r\n                        value: 'Blueste',\r\n                        label: 'Bluestem'\r\n                    }, {\r\n                        value: 'BrDale',\r\n                        label: 'Briardale'\r\n                    }, {\r\n                        value: 'BrkSide',\r\n                        label: 'Brookside'\r\n                    },{\r\n                        value: 'ClearCr',\r\n                        label: 'Clear Creek'\r\n                    }, {\r\n                        value: 'CollgCr',\r\n                        label: 'College Creek'\r\n                    }, {\r\n                        value: 'Crawfor',\r\n                        label: 'Crawford'\r\n                    }, {\r\n                        value: 'Edwards',\r\n                        label: 'Edwards'\r\n                    },{\r\n                        value: 'Gilbert',\r\n                        label: 'Gilbert'\r\n                    }, {\r\n                        value: 'IDOTRR',\r\n                        label: 'Iowa DOT and Rail Road'\r\n                    }, {\r\n                        value: 'MeadowV',\r\n                        label: 'Meadow Village'\r\n                    }, {\r\n                        value: 'Mitchel',\r\n                        label: 'Mitchell'\r\n                    },{\r\n                        value: 'Names',\r\n                        label: 'North Ames'\r\n                    }, {\r\n                        value: 'NoRidge',\r\n                        label: 'Northridge'\r\n                    }, {\r\n                        value: 'NPkVill',\r\n                        label: 'Northpark Villa'\r\n                    }, {\r\n                        value: 'NridgHt',\r\n                        label: 'Northridge Heights'\r\n                    },{\r\n                        value: 'NWAmes',\r\n                        label: 'Northwest Ames'\r\n                    }, {\r\n                        value: 'OldTown',\r\n                        label: 'Old Town'\r\n                    }, {\r\n                        value: 'SWISU',\r\n                        label: 'South & West of Iowa State University'\r\n                    }, {\r\n                        value: 'Sawyer',\r\n                        label: 'Sawyer'\r\n                    },{\r\n                        value: 'SawyerW',\r\n                        label: 'Sawyer West'\r\n                    }, {\r\n                        value: 'Somerst',\r\n                        label: 'Somerset'\r\n                    }, {\r\n                        value: 'StoneBr',\r\n                        label: 'Stone Brook'\r\n                    }, {\r\n                        value: 'Timber',\r\n                        label: 'Timberland'\r\n                    },{\r\n                        value: 'Veenker',\r\n                        label: 'Veenker'\r\n                    },\r\n                    ],\r\n                    styles: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: '1Story',\r\n                        label: 'One Story'\r\n                    }, {\r\n                        value: '1.5Fin',\r\n                        label: 'One and one-half story: 2nd level finished'\r\n                    }, {\r\n                        value: '1.5Unf',\r\n                        label: 'One and one-half story: 2nd level unfinished'\r\n                    }, {\r\n                        value: '2Story',\r\n                        label: 'Two story'\r\n                    }, {\r\n                        value: '2.5Fin',\r\n                        label: 'Two and one-half story: 2nd level finished'\r\n                    },{\r\n                        value: '2.5Unf',\r\n                        label: 'Two and one-half story: 2nd level unfinished'\r\n                    },{\r\n                        value: 'SFoyer',\r\n                        label: 'Split Foyer'\r\n                    },{\r\n                        value: 'SLvl',\r\n                        label: 'Split Level'\r\n                    },\r\n                    ],\r\n                    roofs: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'Flat',\r\n                        label: 'Flat'\r\n                    }, {\r\n                        value: 'Gable',\r\n                        label: 'Gable'\r\n                    }, {\r\n                        value: 'Gambrel',\r\n                        label: 'Gabrel (Barn)'\r\n                    }, {\r\n                        value: 'Hip',\r\n                        label: 'Hip'\r\n                    }, {\r\n                        value: 'Mansard',\r\n                        label: 'Mansard'\r\n                    },{\r\n                        value: 'Shed',\r\n                        label: 'Shed'\r\n                    },\r\n                    ],\r\n                    vaneers: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'BrkCmn',\r\n                        label: 'Brick Common'\r\n                    }, {\r\n                        value: 'BrkFace',\r\n                        label: 'Brick Face'\r\n                    }, {\r\n                        value: 'CBlock',\r\n                        label: 'Cinder Block'\r\n                    }, {\r\n                        value: 'None',\r\n                        label: 'None'\r\n                    }, {\r\n                        value: 'Stone',\r\n                        label: 'Stone'\r\n                    },\r\n                    ],\r\n                    foundations: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'BrkTil',\r\n                        label: 'Brick & Tile'\r\n                    }, {\r\n                        value: 'CBlock',\r\n                        label: 'Cinder Block'\r\n                    }, {\r\n                        value: 'PConc',\r\n                        label: 'Poured Contrete'\r\n                    }, {\r\n                        value: 'Slab',\r\n                        label: 'Slab'\r\n                    }, {\r\n                        value: 'Stone',\r\n                        label: 'Stone'\r\n                    },{\r\n                        value: 'Wood',\r\n                        label: 'Wood'\r\n                    },\r\n                    ],\r\n                    heatings: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'Floor',\r\n                        label: 'Floor Furnace'\r\n                    }, {\r\n                        value: 'GasA',\r\n                        label: 'Gas forced warm air furnace'\r\n                    }, {\r\n                        value: 'GasW',\r\n                        label: 'Gas hot water or steam heat'\r\n                    }, {\r\n                        value: 'Grav',\r\n                        label: 'Gravity furnace'\r\n                    }, {\r\n                        value: 'OthW',\r\n                        label: 'Hot water or steam heat other than gas'\r\n                    },{\r\n                        value: 'Wall',\r\n                        label: 'Wall furnace'\r\n                    },\r\n                    ],\r\n                    airs: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 0,\r\n                        label: 'No'\r\n                    }, {\r\n                        value: 1,\r\n                        label: 'Yes'\r\n                    },\r\n                    ],\r\n                    electricals: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 'SBrkr',\r\n                        label: 'Standard Circuit Breakers & Romex'\r\n                    }, {\r\n                        value: 'FuseA',\r\n                        label: 'Fuse Box over 60 AMP and all Romex wiring (Average)'\r\n                    }, {\r\n                        value: 'FuseF',\r\n                        label: '60 AMP Fuse Box and mostly Romex wiring (Fair)'\r\n                    }, {\r\n                        value: 'FuseP',\r\n                        label: '60 AMP Fuse Box and mostly knob & tube wiring (poor)'\r\n                    }, {\r\n                        value: 'Mix',\r\n                        label: 'Mixed'\r\n                    },\r\n                    ],\r\n                    decks: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 0,\r\n                        label: 'No'\r\n                    }, {\r\n                        value: 1,\r\n                        label: 'Yes'\r\n                    },\r\n                    ],\r\n                    pools: [{\r\n                        value: -1,\r\n                        label: 'It does not matter'\r\n                    },{\r\n                        value: 0,\r\n                        label: 'No'\r\n                    }, {\r\n                        value: 1,\r\n                        label: 'Yes'\r\n                    },\r\n                    ],\r\n                },\r\n            }\r\n        },\r\n        computed: {\r\n            author () {\r\n                return this.$store.state.author\r\n            }\r\n        },\r\n        created() {\r\n          /*alert(this.qtype)*/\r\n          this.qtype = this.message[0]\r\n          this.getInformation()\r\n\r\n        },\r\n      methods: {\r\n            getInformation(){\r\n              /*this.form.inputSize = 1*/\r\n              /*this.form.classification = this.form.classifications[0].value*/\r\n\r\n              if (this.qtype==0||this.qtype==2){\r\n                /*this.form.inputSize = 1*/\r\n\r\n                this.form.inputSize = this.message[2]\r\n                this.form.bedroom = this.message[18]\r\n                this.form.fullbath = this.message[16]\r\n                this.form.halfbath = this.message[17]\r\n                this.form.kitchen = this.message[19]\r\n                this.form.garage = this.message[23]\r\n                this.form.room = this.message[21]\r\n                this.form.price = this.message[25]\r\n                /*alert(this.message[5])*/\r\n                for (let i=0;i<this.form.neighborhoods.length;i++){\r\n                  if (this.message[5]==this.form.neighborhoods[i].value||this.message[5]==\"\"){\r\n                    this.form.neighborhood = this.message[5]\r\n                  }\r\n                }\r\n                for (let i=0;i<this.form.utilities.length;i++){\r\n                  if (this.message[4]==this.form.utilities[i].value||this.message[4]==\"\"){\r\n                    this.form.utility = this.message[4]\r\n                  }\r\n                }\r\n                for (let i=0;i<this.form.styles.length;i++){\r\n                  if (this.message[6]==this.form.styles[i].value||this.message[6]==\"\"){\r\n                    this.form.style = this.message[6]\r\n                  }\r\n                }\r\n                for (let i=0;i<this.form.heatings.length;i++){\r\n                  if (this.message[12]==this.form.heatings[i].value||this.message[12]==\"\"){\r\n                    this.form.heating = this.message[12]\r\n                  }\r\n                }\r\n                for (let i=0;i<this.form.airs.length;i++){\r\n                  if (this.message[13]==this.form.ais[i].value||this.message[13]==\"\"){\r\n                    this.form.air = this.message[13]\r\n                  }\r\n                }\r\n                /*alert(this.form.room)*/\r\n                /*this.form.neighborhood = this.message[5]*/\r\n              }\r\n            },\r\n            handleChange(value) {\r\n                console.log(value);\r\n            },\r\n            recommend(){\r\n              /*alert(typeof this.form.room)*/\r\n                let data = [this.form.classification,this.form.inputSize,this.form.flatness,this.form.utility,this.form.neighborhood,\r\n                            this.form.style,this.form.year,this.form.roof,this.form.vaneer,this.form.foundation,this.form.basement,\r\n                            this.form.heating,this.form.air,this.form.electrical,this.form.living,this.form.fullbath,this.form.halfbath,\r\n                            this.form.bedroom,this.form.kitchen,this.form.room,this.form.fire,this.form.garage,this.form.deck,\r\n                            this.form.pool,this.form.price]\r\n                let invalidcount = 0\r\n                for(let i = 0;i<data.length;i++){\r\n                  if (data[i]==undefined || data[i]==\"\"||data[i]== -1){\r\n                    data[i]= -1\r\n                    invalidcount++\r\n                  }\r\n                }\r\n                if (invalidcount>19){\r\n                    \r\n                }\r\n               /* alert(data)*/\r\n                /*let data = list*/\r\n                const path = 'http://localhost:5000/api/recommend'\r\n                axios.post(path, data)\r\n                    .then(response => {\r\n                       /* alert(\"successful submission\")*/\r\n\r\n                        let all = response.data.result\r\n                        this.$store.commit(\"newRecommendation\",all)\r\n                        this.$store.commit(\"newStatus\",\"1\")\r\n                        /*alert(this.$store.state.status)*/\r\n                        console.log(this.$store.state.recommendation)\r\n                        alert(\"successful submission\")\r\n                    })\r\n                    .catch((error) => {\r\n                        // eslint-disable-next-line\r\n                        console.log(error)\r\n\r\n                    })\r\n                /*this.$emit(\"closeDialogue\",this.close)*/\r\n                /*this.dialogVisible = false*/\r\n                return this.close\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n.el-select{\r\n    background: #ffffff !important;\r\n    color: #ffffff !important;\r\n}\r\n\r\n</style>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- frontend/src/components/Questions.vue	(revision b31549bd7e04101de6442a93f48fefc3ef758736)
+++ frontend/src/components/Questions.vue	(date 1620416023735)
@@ -205,6 +205,7 @@
         <p>
             Copyright&nbsp;&copy;&nbsp;{{author}} - 2021 All rights reserved
         </p>
+
     </div>
 </template>
 
@@ -218,7 +219,7 @@
             return {
                 qtype: this.message[0],
                 information:[],
-                close:false,
+                visible:undefined,
                 form: {
                     classification:"",
                     inputSize:"",
@@ -577,17 +578,51 @@
             getInformation(){
               /*this.form.inputSize = 1*/
               /*this.form.classification = this.form.classifications[0].value*/
-
               if (this.qtype==0||this.qtype==2){
                 /*this.form.inputSize = 1*/
-
-                this.form.inputSize = this.message[2]
-                this.form.bedroom = this.message[18]
-                this.form.fullbath = this.message[16]
-                this.form.halfbath = this.message[17]
-                this.form.kitchen = this.message[19]
-                this.form.garage = this.message[23]
-                this.form.room = this.message[21]
+                if(this.message[18]===-1){
+                  this.form.bedroom = undefined
+                }
+                else{
+                  this.form.bedroom = this.message[18]
+                }
+                if(this.message[16]===-1){
+                  this.form.fullbath = undefined
+                }
+                else{
+                  this.form.fullbath = this.message[16]
+                }
+                if(this.message[17]===-1){
+                  this.form.halfbath = undefined
+                }
+                else{
+                  this.form.halfbath = this.message[17]
+                }
+                if(this.message[19]===-1){
+                  this.form.kitchen = undefined
+                }
+                else{
+                  this.form.kitchen = this.message[19]
+                }
+                if(this.message[22]===-1){
+                  this.form.garage = undefined
+                }
+                else{
+                  this.form.garage = this.message[22]
+                }
+                if(this.message[21]===-1){
+                  this.form.room = undefined
+                }
+                else{
+                  this.form.room = this.message[21]
+                }
+                this.form.inputSize = this.message[2]
+               /* this.form.bedroom = this.message[18]
+                this.form.fullbath = this.message[16]
+                this.form.halfbath = this.message[17]
+                this.form.kitchen = this.message[19]
+                this.form.garage = this.message[23]
+                this.form.room = this.message[21]*/
                 this.form.price = this.message[25]
                 /*alert(this.message[5])*/
                 for (let i=0;i<this.form.neighborhoods.length;i++){
@@ -622,26 +657,8 @@
             handleChange(value) {
                 console.log(value);
             },
-            recommend(){
-              /*alert(typeof this.form.room)*/
-                let data = [this.form.classification,this.form.inputSize,this.form.flatness,this.form.utility,this.form.neighborhood,
-                            this.form.style,this.form.year,this.form.roof,this.form.vaneer,this.form.foundation,this.form.basement,
-                            this.form.heating,this.form.air,this.form.electrical,this.form.living,this.form.fullbath,this.form.halfbath,
-                            this.form.bedroom,this.form.kitchen,this.form.room,this.form.fire,this.form.garage,this.form.deck,
-                            this.form.pool,this.form.price]
-                let invalidcount = 0
-                for(let i = 0;i<data.length;i++){
-                  if (data[i]==undefined || data[i]==""||data[i]== -1){
-                    data[i]= -1
-                    invalidcount++
-                  }
-                }
-                if (invalidcount>19){
-                    
-                }
-               /* alert(data)*/
-                /*let data = list*/
-                const path = 'http://localhost:5000/api/recommend'
+            realrecommend(data){
+              const path = 'http://localhost:5000/api/recommend'
                 axios.post(path, data)
                     .then(response => {
                        /* alert("successful submission")*/
@@ -651,16 +668,59 @@
                         this.$store.commit("newStatus","1")
                         /*alert(this.$store.state.status)*/
                         console.log(this.$store.state.recommendation)
-                        alert("successful submission")
+                        this.visible = false
+                        this.$notify({
+                          title: 'Success',
+                          message: 'successful submission',
+                          type: 'success'
+                        });
+                        /*alert("successful submission")*/
                     })
                     .catch((error) => {
                         // eslint-disable-next-line
                         console.log(error)
 
                     })
-                /*this.$emit("closeDialogue",this.close)*/
-                /*this.dialogVisible = false*/
-                return this.close
+            },
+            recommend(){
+              /*alert(typeof this.form.room)*/
+
+                let data = [this.form.classification,this.form.inputSize,this.form.flatness,this.form.utility,this.form.neighborhood,
+                            this.form.style,this.form.year,this.form.roof,this.form.vaneer,this.form.foundation,this.form.basement,
+                            this.form.heating,this.form.air,this.form.electrical,this.form.living,this.form.fullbath,this.form.halfbath,
+                            this.form.bedroom,this.form.kitchen,this.form.room,this.form.fire,this.form.garage,this.form.deck,
+                            this.form.pool,this.form.price]
+                let invalidcount = 0
+                /*alert(this.form.deck)*/
+                for(let i = 0;i<data.length;i++){
+                  if (data[i]===undefined || data[i]===""||data[i]=== -1){
+                    /*console.log("in",data[i])*/
+                    data[i]= -1
+                    invalidcount++
+                  }
+                }
+                /*alert(invalidcount)*/
+                if (invalidcount>19){
+                    this.$confirm('Sorry, information provided is not enough! Lack of information may lead to inaccurate recommendations, do you confirm to continue recommendation ?', '', {
+                      confirmButtonText: 'confirm',
+                      cancelButtonText: 'no,I will provide more information',
+                      type: 'warning'
+                      }).then(() => {
+                        this.visible = false
+                        /*this.realrecommend(data)*/
+                        this.visible = false
+                        /*return this.visible*/
+                        /*this.recommend()*/
+                      }).catch(() => {
+                        this.visible = true
+                        /*return this.visible*/
+                    });
+                }
+                else {
+                  /*this.realrecommend(data)*/
+                  this.visible = false
+                }
+                return this.visible
             }
         }
     }
Index: nlp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport nltk\r\nfrom nltk import pos_tag\r\nfrom nltk.tokenize import word_tokenize\r\nfrom nltk.stem.porter import PorterStemmer\r\nfrom nltk.stem import WordNetLemmatizer\r\nimport questions\r\nimport robot\r\nimport re\r\nimport recommendation\r\nimport database\r\n\r\nstopwords = set()\r\nporter_stemmer = PorterStemmer()\r\ndef readStopword():\r\n    path = os.path.join('files','stopwords.txt')\r\n    with open (path, 'r') as f:\r\n        for line in f:\r\n            stopwords.add(line.rstrip())\r\ninformationlist = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', -1, -1, -1, -1, -1, -1, -1, '', '', '']\r\n\r\nnumberDic = {\r\n    'zero': 0,\r\n    'one': 1,\r\n    'two': 2,\r\n    'three': 3,\r\n    'four': 4,\r\n    'five': 5,\r\n    'six': 6,\r\n    'seven': 7,\r\n    'eight': 8,\r\n    'nine': 9,\r\n    'ten': 10,\r\n    'eleven': 11,\r\n    'twelve': 12,\r\n    'thirteen': 13,\r\n    'fourteen': 14,\r\n    'fifteen': 15,\r\n    'sixteen': 16,\r\n    'seventeen': 17,\r\n    'eighteen': 18,\r\n    'nineteen': 19,\r\n    'twenty': 20,\r\n    'thirty': 30,\r\n    'forty': 40,\r\n    'fifty': 50,\r\n    'sixty': 60,\r\n    'seventy': 70,\r\n    'eighty': 80,\r\n    'ninety': 90,\r\n}\r\n\r\ndef word_to_number(data):\r\n    punctuation = '!,;:?\"\\'、，；'\r\n    data = re.sub(r'[{}]+'.format(punctuation),' ',data)\r\n    sep = re.split(r'million|billion|thousand|millions|billions|thousands', data)\r\n    result = []\r\n    for s in sep:\r\n        s = s.replace('and', '')\r\n        s = s.strip()\r\n        words = re.split('[ -]', s)\r\n        # print('word to number: ')\r\n        # print(words)\r\n        res = []\r\n        for word in words:\r\n            if word in numberDic:\r\n                count = 0\r\n                break\r\n            elif word == 'hundred' or word == 'hundreds':\r\n                count = 0\r\n                break\r\n            else:\r\n                count = ''\r\n\r\n        for word in words:\r\n            if word in numberDic:\r\n                count += numberDic[word]\r\n            elif word == 'hundred' or word == 'hundreds':\r\n                if count == 0:\r\n                    count += 100\r\n                else:\r\n                    count = count * 100\r\n            else:\r\n                res.append(word)\r\n        if words[0] in numberDic:\r\n            res.insert(0, count)\r\n        else:\r\n            res.append(count)\r\n        result.append(res)\r\n    final = ''\r\n    for r in result:\r\n        # print(r)\r\n        for i in r:\r\n            if isinstance(i,int):\r\n                # print(i)\r\n                # print(len(str(i)))\r\n                if len(str(i)) == 1:\r\n                    final = final + '00' + str(i)\r\n                elif len(str(i)) == 2:\r\n                    final = final + '0' + str(i)\r\n                else:\r\n                    final += str(i)\r\n            else:\r\n                if i != '':\r\n                    final = final + ' ' + i + ' '\r\n    return final\r\n\r\ndef preprocessing(data):\r\n    if len(stopwords) == 0:\r\n        readStopword()\r\n    data = word_to_number(data)\r\n    # print('preprocessing: ')\r\n    # print(data)\r\n    words = []\r\n    tags = pos_tag(word_tokenize(data))\r\n    wnl = WordNetLemmatizer()\r\n    for w, t in tags:\r\n        # if w not in stopwords:\r\n        if t.startswith('NN'):\r\n            words.append(wnl.lemmatize(w, pos='n'))\r\n        elif t.startswith('VB'):\r\n            words.append(wnl.lemmatize(w, pos='v'))\r\n        elif t.startswith('JJ'):\r\n            words.append(wnl.lemmatize(w, pos='a'))\r\n        elif t.startswith('R'):\r\n            words.append(wnl.lemmatize(w, pos='r'))\r\n        else:\r\n            words.append(w)\r\n    return words\r\n\r\ndef NaturalLanguageProcess(data, process1, process2):\r\n    data = data.lower().strip()\r\n    wordsList = preprocessing(data)\r\n    # print('nature: ')\r\n    # print(wordsList)\r\n    # print(process1)\r\n    # print(process2)\r\n    if process1 == -1:\r\n        returnlist = [robot.getRespond(data), process1, process2]\r\n    elif process1 == 0:\r\n        answerkeyword1 = ['yes','y','ok','yep','sure','yea','yeah','fine','okay','maybe','need','of course','get']\r\n        answerkeyword2 = ['no','n','never','noway']\r\n        if len(set(wordsList).intersection(set(answerkeyword1))) != 0:\r\n            process1 += 1\r\n            process2 = 0\r\n            returnlist = [questions.questionList[2], process1, process2]\r\n        else:\r\n            if len(set(wordsList).intersection(set(answerkeyword2))) != 0:\r\n                process1 = -1\r\n                process2 = -1\r\n                returnlist = [questions.questionList[1], process1, process2]\r\n            else:\r\n                process2 += 1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[0], process1, process2]\r\n    elif process1 == 1:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) < 10000000 and int(word) > 20000:\r\n                    process1 = 2\r\n                    process2 = 0\r\n                    informationlist[24] = word\r\n                    returnlist = [\"Ok, I know. Let's come to next question.\" + '\\n' + questions.questionList[3], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[24] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[2], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 2\r\n                        informationlist[24] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[3], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[24] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[2], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 2\r\n                informationlist[24] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[3], process1, process2]\r\n\r\n    elif process1 == 2:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) < 15 and int(word) >= 0:\r\n                    process1 = 3\r\n                    process2 = 0\r\n                    informationlist[17] = word\r\n                    returnlist = [\"I see.\" + '\\n' + questions.questionList[4], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[17] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[3], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 3\r\n                        informationlist[17] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[4], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[17] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[3], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 3\r\n                informationlist[17] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[4], process1, process2]\r\n    elif process1 == 3:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) < 10 and int(word) >= 0:\r\n                    process1 = 4\r\n                    process2 = 0\r\n                    informationlist[15] = word\r\n                    returnlist = [\"Ok.\" + '\\n' + questions.questionList[5], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[15] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[4], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 4\r\n                        informationlist[15] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[5], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[15] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[4], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 4\r\n                informationlist[15] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[5], process1, process2]\r\n    elif process1 == 4:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) < 6 and int(word) >= 0:\r\n                    process1 = 5\r\n                    process2 = 0\r\n                    informationlist[16] = word\r\n                    returnlist = [\"Well.\" + '\\n' + questions.questionList[6], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[16] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[5], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 5\r\n                        informationlist[16] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[6], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[16] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[5], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 5\r\n                informationlist[16] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[6], process1, process2]\r\n    elif process1 == 5:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) < 250000 and int(word) >= 1000:\r\n                    process1 = 6\r\n                    process2 = 0\r\n                    informationlist[1] = word\r\n                    returnlist = [\"Well.\" + '\\n' + questions.questionList[7], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[1] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[6], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 6\r\n                        informationlist[1] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[7], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[1] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[6], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 6\r\n                informationlist[1] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[7], process1, process2]\r\n    elif process1 == 6:\r\n        ans = False\r\n        answerlist = ['it does not matter', 'bloomington heights', 'bluestem', 'briardale', 'brookside',\r\n                      'clear creek', 'college creek', 'crawford', 'edwards', 'gilbert', 'iowa dot and rail road',\r\n                      'meadow village', 'mitchell', 'north ames', 'northridge', 'northpark villa', 'northridge heights',\r\n                      'northwest ames', 'old town', 'south & west of iowa state university', 'sawyer', 'sawyer west',\r\n                      'somerset', 'stone brook', 'timberland', 'veenker']\r\n        item = ['-1', 'Blmngtn', 'Blueste', 'Brdale', 'Brkside', 'Clearcr',\r\n                'Collgcr', 'Crawfor', 'Edwards', 'Gilbert', 'IDOTRR',\r\n                'MeadowV', 'Mitchel', 'NAmes', 'NoRidge', 'NPkVill',\r\n                'NridgHt', 'NWAmes', 'OldTown', 'SWISU', 'Sawyer',\r\n                'SawyerW', 'Somerst', 'StoneBr', 'Timber', 'Veenker']\r\n        for i,answer in enumerate(answerlist):\r\n            if re.match(answer,data) is not None:\r\n                process1 = 7\r\n                process2 = 0\r\n                informationlist[4] = item[i]\r\n                returnlist = [\"Well.\" + '\\n' + questions.questionList[8], process1, process2]\r\n                ans = True\r\n                break\r\n        if ans == False:\r\n            i = 0\r\n            for word in wordsList:\r\n                if word.isdigit():\r\n                    if int(word) <= 25 and int(word) >= 0:\r\n                        process1 = 7\r\n                        process2 = 0\r\n                        informationlist[4] = item[int(word)]\r\n                        returnlist = [\"Well.\" + '\\n' + questions.questionList[8], process1, process2]\r\n                    else:\r\n                        if process2 == 0:\r\n                            # print('test')\r\n                            process2 = 1\r\n                            informationlist[4] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[7], process1, process2]\r\n                        elif process2 == 1:\r\n                            process2 = 0\r\n                            process1 = 7\r\n                            informationlist[4] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[8], process1, process2]\r\n                else:\r\n                    i += 1\r\n            print(i)\r\n            if (i == len(wordsList)):\r\n                print('2')\r\n                if process2 == 0:\r\n                    # print('test')\r\n                    process2 = 1\r\n                    informationlist[4] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[7], process1, process2]\r\n                elif process2 == 1:\r\n                    process2 = 0\r\n                    process1 = 7\r\n                    informationlist[4] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[8], process1, process2]\r\n    elif process1 == 7:\r\n        ans = False\r\n        item = ['-1', 'AllPub', 'NoSewr', 'NoSeWa', 'ELO']\r\n        answerlist = ['it does not matter', 'all public utilities (e,g,w,& s)', 'electricity, gas, and water (septic tank)', 'electricity and gas only', 'electricity only']\r\n        for i, answer in enumerate(answerlist):\r\n            if re.match(answer.lower(),data) is not None:\r\n                process1 = 8\r\n                process2 = 0\r\n                informationlist[3] = item[i]\r\n                returnlist = [\"Well.\" + '\\n' + questions.questionList[9], process1, process2]\r\n                ans = True\r\n                break\r\n        if ans == False:\r\n            i = 0\r\n            for word in wordsList:\r\n                if word.isdigit():\r\n                    if int(word) <= 4 and int(word) >= 0:\r\n                        process1 = 8\r\n                        process2 = 0\r\n                        informationlist[3] = item[int(word)]\r\n                        returnlist = [\"Well.\" + '\\n' + questions.questionList[9], process1, process2]\r\n                    else:\r\n                        if process2 == 0:\r\n                            # print('test')\r\n                            process2 = 1\r\n                            informationlist[3] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[8], process1, process2]\r\n                        elif process2 == 1:\r\n                            process2 = 0\r\n                            process1 = 8\r\n                            informationlist[3] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[9], process1, process2]\r\n                else:\r\n                    i += 1\r\n            if (i == len(wordsList)):\r\n                if process2 == 0:\r\n                    # print('test')\r\n                    process2 = 1\r\n                    informationlist[3] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[8], process1, process2]\r\n                elif process2 == 1:\r\n                    process2 = 0\r\n                    process1 = 8\r\n                    informationlist[3] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[9], process1, process2]\r\n    elif process1 == 8:\r\n        ans = False\r\n        item = ['-1', '1Story', '1.5Fin', '1.5Unf', '2Story', '2.5Fin', '2.5Unf',\r\n                'SFoyer', 'SLvl']\r\n        answerlist = ['it does not matter', 'one story', 'one and one-half story: 2nd level finished', 'one and one-half story: 2nd level unfinished',\r\n                      'two story', 'two and one-half story: 2nd level finished', 'two and one-half story: 2nd level unfinished', 'split foyer', 'split level']\r\n        for i, answer in enumerate(answerlist):\r\n            if re.match(answer.lower(),data) is not None:\r\n                process1 = 9\r\n                process2 = 0\r\n                informationlist[5] = item[i]\r\n                returnlist = [\"Well.\" + '\\n' + questions.questionList[10], process1, process2]\r\n                ans = True\r\n                break\r\n        if ans == False:\r\n            i = 0\r\n            for word in wordsList:\r\n                if word.isdigit():\r\n                    if 8 >= int(word) >= 0:\r\n                        process1 = 9\r\n                        process2 = 0\r\n                        informationlist[5] = item[int(word)]\r\n                        returnlist = [\"Well.\" + '\\n' + questions.questionList[10], process1, process2]\r\n                    else:\r\n                        if process2 == 0:\r\n                            # print('test')\r\n                            process2 = 1\r\n                            informationlist[5] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[9], process1, process2]\r\n                        elif process2 == 1:\r\n                            process2 = 0\r\n                            process1 = 9\r\n                            informationlist[5] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[10], process1, process2]\r\n                else:\r\n                    i += 1\r\n            if (i == len(wordsList)):\r\n                if process2 == 0:\r\n                    # print('test')\r\n                    process2 = 1\r\n                    informationlist[5] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[9], process1, process2]\r\n                elif process2 == 1:\r\n                    process2 = 0\r\n                    process1 = 9\r\n                    informationlist[5] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[10], process1, process2]\r\n    elif process1 == 9:\r\n        ans = False\r\n        item = ['-1', 'Floor', 'GasA', 'GasW', 'Grav', 'OthW', 'Wall']\r\n        answerlist = ['It does not matter', 'Floor Furnace', 'Gas forced warm air furnace',\r\n                      'Gas hot water or steam heat', 'Gravity furnace',\r\n                      'Hot water or steam heat other than gas', 'Wall furnace']\r\n        for i, answer in enumerate(answerlist):\r\n            if re.match(answer.lower(),data) is not None:\r\n                process1 = 10\r\n                process2 = 0\r\n                informationlist[11] = item[i]\r\n                returnlist = [\"Well.\" + '\\n' + questions.questionList[11], process1, process2]\r\n                ans = True\r\n                break\r\n        if ans == False:\r\n            i = 0\r\n            for word in wordsList:\r\n                if word.isdigit():\r\n                    if int(word) <= 6 and int(word) >= 0:\r\n                        process1 = 10\r\n                        process2 = 0\r\n                        informationlist[11] = item[int(word)]\r\n                        returnlist = [\"Well.\" + '\\n' + questions.questionList[11], process1, process2]\r\n                    else:\r\n                        if process2 == 0:\r\n                            # print('test')\r\n                            process2 = 1\r\n                            informationlist[11] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' +\r\n                                          questions.questionList[10], process1, process2]\r\n                        elif process2 == 1:\r\n                            process2 = 0\r\n                            process1 = 10\r\n                            informationlist[11] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' +\r\n                                          questions.questionList[11], process1, process2]\r\n                else:\r\n                    i += 1\r\n            if (i == len(wordsList)):\r\n                if process2 == 0:\r\n                    # print('test')\r\n                    process2 = 1\r\n                    informationlist[11] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[10], process1, process2]\r\n                elif process2 == 1:\r\n                    process2 = 0\r\n                    process1 = 10\r\n                    informationlist[11] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[11], process1, process2]\r\n    elif process1 == 10:\r\n        ans = False\r\n        item = ['-1', 'Y', 'N']\r\n        answerlist = ['It does not matter', 'Yes', 'No']\r\n        for i, answer in enumerate(answerlist):\r\n            if re.match(answer.lower(),data) is not None:\r\n                process1 = 11\r\n                process2 = 0\r\n                informationlist[12] = item[i]\r\n                returnlist = [\"Well.\" + '\\n' + questions.questionList[12], process1, process2]\r\n                ans = True\r\n                break\r\n        if ans == False:\r\n            i = 0\r\n            for word in wordsList:\r\n                if word.isdigit():\r\n                    if int(word) <= 2 and int(word) >= 0:\r\n                        process1 = 11\r\n                        process2 = 0\r\n                        informationlist[12] = item[int(word)]\r\n                        returnlist = [\"Well.\" + '\\n' + questions.questionList[12], process1, process2]\r\n                    else:\r\n                        if process2 == 0:\r\n                            # print('test')\r\n                            process2 = 1\r\n                            informationlist[12] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' +\r\n                                          questions.questionList[11], process1, process2]\r\n                        elif process2 == 1:\r\n                            process2 = 0\r\n                            process1 = 11\r\n                            informationlist[12] = ''\r\n                            returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' +\r\n                                          questions.questionList[12], process1, process2]\r\n                else:\r\n                    i += 1\r\n            if (i == len(wordsList)):\r\n                if process2 == 0:\r\n                    # print('test')\r\n                    process2 = 1\r\n                    informationlist[12] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[11], process1, process2]\r\n                elif process2 == 1:\r\n                    process2 = 0\r\n                    process1 = 11\r\n                    informationlist[12] = ''\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[12], process1, process2]\r\n    elif process1 == 11:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) <= 5 and int(word) >= 0:\r\n                    process1 = 12\r\n                    process2 = 0\r\n                    informationlist[18] = word\r\n                    returnlist = [\"Well.\" + '\\n' + questions.questionList[13], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[18] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[12], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 12\r\n                        informationlist[18] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[13], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[18] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[12], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 12\r\n                informationlist[18] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[13], process1, process2]\r\n    elif process1 == 12:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) <= 6 and int(word) >= 0:\r\n                    process1 = 13\r\n                    process2 = 0\r\n                    informationlist[22] = word\r\n                    returnlist = [\"Well.\" + '\\n' + questions.questionList[14], process1, process2]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[22] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[13], process1, process2]\r\n                    elif process2 == 1:\r\n                        process2 = 0\r\n                        process1 = 13\r\n                        informationlist[22] = ''\r\n                        returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\\n' + questions.questionList[14], process1, process2]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[22] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[13], process1, process2]\r\n            elif process2 == 1:\r\n                process2 = 0\r\n                process1 = 13\r\n                informationlist[22] = ''\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[14], process1, process2]\r\n    elif process1 == 13:\r\n        i = 0\r\n        for word in wordsList:\r\n            if word.isdigit():\r\n                if int(word) <= 15 and int(word) >= 0:\r\n                    informationlist[20] = word\r\n                    count = 0\r\n                    for i in informationlist:\r\n                        if i != '' and i != -1:\r\n                            count += 1\r\n                    if count >= 6:\r\n                        process2 = 0\r\n                        process1 = 14\r\n                        returnlist = ['I see. Thank you for answering all the question.' + '\\n' + questions.questionList[15], process1, process2]\r\n                    else:\r\n                        process2 = 0\r\n                        process1 = 15\r\n                        returnlist = ['Umm..., your answer seems unreasonable.' + '\\n' + questions.questionList[16], process1, process2, informationlist]\r\n                else:\r\n                    if process2 == 0:\r\n                        # print('test')\r\n                        process2 = 1\r\n                        informationlist[20] = -1\r\n                        returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\\n' + questions.questionList[14], process1, process2]\r\n                    elif process2 == 1:\r\n                        count = 0\r\n                        for i in informationlist:\r\n                            if i != '' and i != -1:\r\n                                count += 1\r\n                        if count >= 6:\r\n                            process2 = 0\r\n                            process1 = 14\r\n                            informationlist[20] = -1\r\n                            returnlist = ['Umm..., your answer seems unreasonable.' + '\\n' + 'Above are all the question.' + questions.questionList[\r\n                                    15], process1, process2]\r\n                        else:\r\n                            process2 = 0\r\n                            process1 = 15\r\n                            informationlist[20] = -1\r\n                            returnlist = ['Umm..., your answer seems unreasonable.' + '\\n' + questions.questionList[16], process1,\r\n                                          process2, informationlist]\r\n            else:\r\n                i += 1\r\n        if (i == len(wordsList)):\r\n            if process2 == 0:\r\n                # print('test')\r\n                process2 = 1\r\n                informationlist[20] = -1\r\n                returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[14], process1, process2]\r\n            elif process2 == 1:\r\n                count = 0\r\n                for i in informationlist:\r\n                    if i != '' and i != -1:\r\n                        count += 1\r\n                if count >= 6:\r\n                    process2 = 0\r\n                    process1 = 14\r\n                    informationlist[20] = -1\r\n                    returnlist = [robot.getRespond(data) + '\\n' + 'Above are all the question.' + questions.questionList[15], process1, process2]\r\n                else:\r\n                    process2 = 0\r\n                    process1 = 15\r\n                    informationlist[20] = -1\r\n                    returnlist = [robot.getRespond(data) + '\\n' + questions.questionList[16], process1, process2, informationlist]\r\n    elif process1 == 14:\r\n        answerkeyword1 = ['yes', 'y', 'ok', 'yep', 'sure', 'yea', 'yeah', 'fine', 'okay']\r\n        # answerkeyword2 = ['no', 'n', 'never', 'noway']\r\n        if len(set(wordsList).intersection(set(answerkeyword1))) != 0:\r\n            process1 = 16\r\n            process2 = 0\r\n            returnlist = ['', process1, process2, informationlist]\r\n        else:\r\n            houselist = recommendation.recommendationSysAlgorithm(informationlist)\r\n            houseinfo = database.getHouseByIds(houselist)\r\n            process1 = 17\r\n            process2 = 0\r\n            returnlist = ['', process1, process2, houseinfo]\r\n        print(informationlist)\r\n    elif process1 == 15:\r\n        returnlist = ['Please fill in the questionnaire and submit it, then we can recommend suitable houses for you.', process1, process2, informationlist]\r\n    elif process1 == 16:\r\n        process1 = 17\r\n        process2 = 0\r\n        houselist = recommendation.recommendationSysAlgorithm(informationlist)\r\n        houseinfo = database.getHouseByIds(houselist)\r\n        returnlist = ['', process1, process2, houseinfo]\r\n    elif process1 == 17:\r\n        process2 += 1\r\n        returnlist = [robot.getRespond(data), process1, process2]\r\n\r\n    # print(process1)\r\n    # print(process2)\r\n    print(informationlist)\r\n    return returnlist\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- nlp.py	(revision b31549bd7e04101de6442a93f48fefc3ef758736)
+++ nlp.py	(date 1620408407979)
@@ -601,18 +601,18 @@
                 if int(word) <= 6 and int(word) >= 0:
                     process1 = 13
                     process2 = 0
-                    informationlist[22] = word
+                    informationlist[21] = word
                     returnlist = ["Well." + '\n' + questions.questionList[14], process1, process2]
                 else:
                     if process2 == 0:
                         # print('test')
                         process2 = 1
-                        informationlist[22] = ''
+                        informationlist[21] = -1
                         returnlist = ['Umm..., your answer seems unreasonable, please check it again' + '\n' + questions.questionList[13], process1, process2]
                     elif process2 == 1:
                         process2 = 0
                         process1 = 13
-                        informationlist[22] = ''
+                        informationlist[21] = -1
                         returnlist = ['Umm..., your answer seems unreasonable, let me change another question.' + '\n' + questions.questionList[14], process1, process2]
             else:
                 i += 1
@@ -620,12 +620,12 @@
             if process2 == 0:
                 # print('test')
                 process2 = 1
-                informationlist[22] = ''
+                informationlist[21] = -1
                 returnlist = [robot.getRespond(data) + '\n' + questions.questionList[13], process1, process2]
             elif process2 == 1:
                 process2 = 0
                 process1 = 13
-                informationlist[22] = ''
+                informationlist[21] = -1
                 returnlist = [robot.getRespond(data) + '\n' + questions.questionList[14], process1, process2]
     elif process1 == 13:
         i = 0
